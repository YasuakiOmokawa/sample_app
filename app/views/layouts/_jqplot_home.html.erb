<script type="text/javascript">

// データ項目一覧の設定
var setDataidx = function() {

  var homearr = $.extend(true, {}, gon.homearr); // 参照渡しだとバグる。
  var idxarr = [];
  var arr = [];
  var cnt = 0;

  for (var i in homearr) {
    arr.push( homearr[i] );
    arr[cnt].forEach( function(value) {
      value[3] = String(i) + ';;' + value[3];
      var ar = new Array();

      // GAPと相関の合計値が高いものほど優先度を高くする。
      var pri = value[0] + value[1];
      ar['pri'] = pri;
      ar['arr'] = value;
      idxarr.push(ar);
    });
    cnt += 1
  }
  return idxarr;
}

// グラフデータ全設定
var setData = function(opt) {

  var homearr = $.extend(true, {}, gon.homearr); // 参照渡しだとバグる。
  var arr = [];
  var cnt = 0;

  for (var i in homearr) {
    arr.push( homearr[i] );
    arr[cnt].forEach( function(value) {
      value[3] = String(i) + ';;' + value[3];
    });

    // グラフ描画オプション追加
    setGraphcolor( i, opt );
    cnt += 1
  }
  return arr;
}

// 再描画用にデータを集める
var replotdata = function(allarr, wd) {
  var a = [];
  for(i=0; i < allarr[wd].length; i++) {
    allarr[wd][i][3] = String(wd) + ';;' + allarr[wd][i][3];
  }
  a.push( allarr[wd] );
  return a;
}

//降順ソート
Array.prototype.arsort = function(key) {
    this.sort(function(a, b) {
        return (a[key] < b[key]) ? 1 : -1;
    });
}

// グラフ項目の色を決定
function setGraphcolor(wd, opt) {
  var p_wd = wd

  switch (p_wd) {
    case '全体':
      opt.series.push( { color: 'gray'} );
      break;
    case '検索':
      opt.series.push( { color: '#e6b422'} );
      break;
    case '直接入力ブックマーク':
      opt.series.push( { color: 'blue'} );
      break;
    case 'その他ウェブサイト':
      opt.series.push( { color: 'green'} );
      break;
    case 'ソーシャル':
      opt.series.push( { color: 'red'} );
      break;
    case 'キャンペーン':
      opt.series.push( { color: 'pink'} );
      break;
  }
}

// グラフ項目のinputパラメータを設定
function setItem(data,  graph, narrow) {
  var option; // 項目名（オプション）
  var tips = ''; // ツールチップの テキスト
  var supl = ''; // 項目一覧のテキスト

  var tab = data[0]; // 各ページ名
  var a;
  var item = data[1]; // 項目名
  tips = tab + '<br>' + item;
  switch (item) {
    case 'PV数':
      tips = tips + '<br>' + chk_days(data);
      supl = chk_days(data);
      graph.val('pageviews');
      break;
    case '平均PV数':
      tips = tips + '<br>' + chk_days(data);
      supl = chk_days(data);
      graph.val('pageviews_per_session');
      break;
    case '訪問回数':
      tips = tips + '<br>' + chk_days(data);
      supl = chk_days(data);
      graph.val('sessions');
      break;
    case '直帰率':
      tips = tips + '<br>' + chk_days(data);
      supl = chk_days(data);
      graph.val('bounce_rate');
      break;
    case '新規訪問率':
      tips = tips + '<br>' + chk_days(data);
      supl = chk_days(data);
      graph.val('percent_new_sessions');
      break;
    case '平均滞在時間':
      tips = tips + '<br>' + chk_days(data);
      supl = chk_days(data);
      graph.val('avg_session_duration');
      break;
    case '再訪問率':
      tips = tips + '<br>' + chk_days(data);
      supl = chk_days(data);
      graph.val('repeat_rate');
      break;
    case '人気ページ':
      tips = tips + '<br>' + data[2];
      supl = data[2] + '<p>' + data[3] + '</p>'
      $('#narrow_select').val( data[2] + 'f');
      break;
  }
  return [ tips, supl ];
}

// 曜日別の判定
function chk_days(data) {
  var d;
  if (data.length == 3) {
    d = data[2];
    // tips = tips + '<br>' + data[2];
  }else{
    d = ' ';
  }
  return d;
}

jQuery( function() {

  // バブル（散布図）チャート相関グラフ
  // x軸, y軸, 大きさ(radius), 項目名　の順に表示
  // x ... GAP y ... 相関　で現す。

  // グラフ描画オプション
  var options = {
    seriesDefaults: {
      renderer: jQuery.jqplot.BubbleRenderer,
      rendererOptions: {
        bubbleAlpha: 0.2,
        highlightAlpha: 1.0,
        showLabels: false,
        varyBubbleColors: false,
        autoscaleMultiplier: 0.2,
      },
    },
    series: [], // ここに関数でカラーセットを行う
    axesDefaults: {
      numberTicks: 3,
      tickOptions: {
        fontSize: '10pt',
        fontFamily: 'ヒラギノ角ゴ Pro W3',
      },
    },
    axes: {
      // 見栄えの問題で、max は101, min は -1 で調整
      xaxis: {
        label: 'GAP',
        min: -1,
        max: 101,
      },
      yaxis: {
        label: '相関',
        min: -1,
        max: 101,
      },
    },
    // 背景色に関する設定
    grid: {
      background: "transparent",
      gridLineColor: "black",
      shadow: false,
      drawGridlines: true,
      drawBorder: false,
    }
  };

  // グラフデータを設定
  if (typeof(gon.homearr) == "undefined") {

    // コントローラからデータが渡されない場合
    var arr = [
      [ 1, 1, 1, 'tst' ]
    ];

  } else {

    // データセット
    var arr = setData(options);

    // データ項目一覧セット
    var idxarr = setDataidx();

    // データ項目一覧を降順ソート
    idxarr.arsort('pri');

    // データ項目一覧ヘッダを追記
    $('#legend1b').append(
      $('<tr>')
      .attr({id: 'line'}).append(
        $('<td>').text('ページ')
      ).append(
        $('<td>').text('項目')
      ).append(
        $('<td>').text('GAP')
      ).append(
        $('<td>').text('相関')
      ).append(
        $('<td>').text('補足情報')
      )
    );

    // 項目一覧データを追記
    idxarr.forEach(function(value){

      var text = value['arr'][3].split(';;');

      // ページ名（全体、検索、など）
      var page = 'li.tab > a:contains(' + String(text[0]) + ')';

      // ページへのリンク
      var name = $(page)[0].name;

      // 補足情報
      var tips = setItem( text, $('input[name="graphic_item"]'), $('#narrow_select') );

      $('#legend1b').append(
        $('<tr>')
          .attr( {name: name, 'data-page': value['arr'][3] }
        ).append(
          $('<td>').text(String(text[0]))
        ).append(
          $('<td>').text(String(text[1]))
        ).append(
          $('<td>').text(String(value['arr'][0]))
        ).append(
          $('<td>').text(String(value['arr'][1]))
        ).append(
          $('<td>')
            .attr({class: 'row'})
            .html(tips[1])
        )
      );
    });

    // 項目一覧データにクリックイベントを追加
    //classにclickableを付加
    $('tr[data-page]').addClass('clickable')
      .click(function(e) {

        //e.targetはクリックした要素自体、それがa要素以外であれば
        if(!$(e.target).is('a')){

          //その要素の先祖要素で一番近いtrの
          //data-page属性の値を加工する
          var item = $(e.target).closest('tr').data('page').split(';;');
          console.log(item);

          // グラフ項目と人気ページパラメータを設定
          setItem( item, $('input[name="graphic_item"]'), $('#narrow_select') );

          // ページ遷移
          evtsend($(e.target).closest('tr'));
        };
    });

  }

  // jqplot描画後に実行する操作（jqplot描画前に書くこと）
  $.jqplot.postDrawHooks.push(function(square) {
    var selcts = [ $('.jqplot-xaxis-tick'), $('.jqplot-yaxis-tick') ];
    for (var i=0; i<selcts.length; i++) {
      $(selcts[i][0]).text('小');
      $(selcts[i][1]).text('');
      $(selcts[i][2]).text('大');
    }
  });

  // jqplot描画
  var square = jQuery . jqplot('square', arr, options);

  // ハイライトツールチップを表示
  $('#square').bind('jqplotDataHighlight',
    function (ev, seriesIndex, pointIndex, data, radius) {
      var
        dt = data[3].split(';;'),
        color = 'black',
        chart_left = $('#square').offset().left,
        chart_top = $('#square').offset().top,
        // convert x axis unita to pixels
        x = square.axes.xaxis.u2p(data[0]),
        // convert y axis units to pixels
        y = square.axes.yaxis.u2p(data[1]);
      console.log( "full data is " + dt );

      var page = 'li.tab > a:contains(' + String(dt[0]) + ')';
      var id = $(page)[0].id;
      console.log( "href action is " + id );

      var tips = setItem( dt, $('input[name="graphic_item"]'), $('#narrow_select') );
      console.log( "tooptip is  " + tips );
      // ツールチップのCSS
      $('#tooltip1s').css(
        {
          left: chart_left+x+radius + -5,
          top: chart_top+y,
          'text-align': 'center'
        });
      // ツールチップHTML
      $('#tooltip1s').html(
          '<a href="javascript:void(0)" name=' + id +' class="abtn" '
          + ' style="font-size:14px;' +
          'font-weight:bold;color:' + color + ';background-color: whitesmoke;">'
          + tips[0]
          + '</a>'
        );
      $('#tooltip1s').show();
      // ツールチップへリンク付与
      $("li.tab a").click(function(){
        evtsend($(this));
      });

    }
  );

  // ハイライトツールチップを隠す
  $('#square').bind('jqplotDataUnhighlight',
      function (ev, seriesIndex, pointIndex, data) {
          // 絞り込み選択を解除
          $('#narrow_select').each(function() {
            this.selectedIndex = 0;
          });
          // グラフ描画オプションをpageview(初期値)に戻す
          $('input[name="graphic_item"]').val('pageviews');
          $('#tooltip1s').empty();
          $('#tooltip1s').hide();
      }
  );

  // 再描画ボタンがクリックされたらグラフをリプロットする
  $('#circle .replot').click(function() {
    var wd = $(this).text();
    console.log("replot " + wd);
    var addopt = { series: [] };

    if (wd == '全データを再表示') {
      var arr = setData(addopt);
      addopt.data = arr;
    } else {
      var src = $.extend(true, {}, gon.homearr); // 参照渡しだとバグる。
      var rdata = replotdata(src, wd);
      addopt.data = rdata;
      setGraphcolor( wd, addopt );
    }

    // 再描画を実行
    // jqplot の replot関数は、追加のオプションを設定すると
    // 追加部分「だけ」変更してくれるので余計な記載をせずに済む。
    square.replot(addopt);
  });

});
</script>
