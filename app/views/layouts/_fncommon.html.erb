<script type="text/javascript">

function likeRadio(obj) {
  var n = obj.attr("name");
  var m = '#hallway input[name=' + n + ']';
  var objs = $(m);
  var f = objs, cnt = 0;
  for(var i=0;i<f.length;i++ ){
    if ( f[i].checked === true ) {
      cnt = cnt + 1;
    }
  }
  if (cnt >= 2) {
    obj.attr("checked", false);
    console.log("oh, no! duplicate check is invalid");
  }
}

// 指定した要素をフォーム送信ボタンをクリックしたときと同じ動作にする
var evtset = function (at) {
  $('#hallway > form').attr("action", at.attr("name"));
  console.log(at);
}
var evtsend = function (at) {
  $('#hallway > form').attr("action", at.attr("name"));
  $('a#set').trigger('click');
}

// 期間設定ボックスの初期値を設定
var setRange = function setRange() {
  var range = $('#from').val() + ' ~ ' + $('#to').val();
  $('#jrange input').val(range);
}

$(document).ready(function() {

  // チェックボックスの複数選択を抑止
  $('form [name=device]').click(function() {
    likeRadio($(this));
  });
  $('form [name=visitor]').click(function() {
    likeRadio($(this));
  });

  // 絞り込みボタンを押したとき、進捗バーを進める
  $('a#set').click(function(){

    $('#dialog-progressbar').dialog({
      draggable: false,
      open: function(event, ui){
        $(".ui-dialog-titlebar-close").hide();

      // スピナーの実装
      var opts = {
        lines: 13, // The number of lines to draw
        length: 20, // The length of each line
        width: 10, // The line thickness
        radius: 30, // The radius of the inner circle
        corners: 1, // Corner roundness (0..1)
        rotate: 0, // The rotation offset
        direction: 1, // 1: clockwise, -1: counterclockwise
        color: '#000', // #rgb or #rrggbb or array of colors
        speed: 1, // Rounds per second
        trail: 60, // Afterglow percentage
        shadow: false, // Whether to render a shadow
        hwaccel: false, // Whether to use hardware acceleration
        className: 'spinner', // The CSS class to assign to the spinner
        zIndex: 2e9, // The z-index (defaults to 2000000000)
      };
        var target = $('#progress');
        var spinner = new Spinner(opts).spin();
        target.append(spinner.el);
      },
      width: 200,
      height: 200,
      title: '読み込み中 ...',
      modal: true,
    });
  });

  // GAP値がマイナスなら赤色にする
  $('td.gap').each(function() {
    var str = $(this).text();
    if( str.substr(0,1) == "-" ) {
      $(this).css("color", "red");
    // } else {
    //   $(this).css("color", "black");
    }
  });

  // 選択したページタブのタグをdiv へ変える
  var tab = gon.div_page_tab;
  var tag = 'li#' + tab + ' a';
  var id = '<div>';
  if ( $(tag).html().match(/<br>/) ) {
    id = '<div id="db">';
  }
  $(tag).replaceWith(id + $(tag).html() + '</div>');

  // 各ページのタブへリンク付与
  $("li.tab a").click(function(){
    evtsend($(this));
  });



  // ラジオボタンの選択値を保持
  rdo_dev = gon.radio_device
  rdo_vst = gon.radio_visitor
  $('input[name="device"]').val([rdo_dev]);
  $('input[name="visitor"]').val([rdo_vst]);

  // セレクトボックスの選択値を保持
  nrw_wd = gon.narrow_word
  $('select[name="narrow_select"]').val(nrw_wd);

  // グラフ表示項目の選択値を保持
  grh_fmt = gon.graphic_item
  $('select[name="graphicselect"]').val(grh_fmt);
  $('input[name="graphic_item"]').val(grh_fmt);

  // CV種類の選択値を保持
  cv = gon.cv_num
  $('select[name="cvselect"]').val(cv);
  $('input[name="cv_num"]').val(cv);

  // ページ読み込み時の期間設定ボックス設定
  setRange();

});
</script>
